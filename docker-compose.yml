version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: securetag-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-securetagpassword}
      MONGO_INITDB_DATABASE: securetag
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - securetag-network

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: securetag-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - securetag-network
    command: redis-server --requirepass ${REDIS_PASSWORD:-securetagredis}

  # SecureTag Backend API
  backend:
    build: .
    container_name: securetag-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-securetagpassword}@mongodb:27017/securetag?authSource=admin
      REDIS_URL: redis://:${REDIS_PASSWORD:-securetagredis}@redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      EMAIL_USER: ${EMAIL_USER:-securetag6@gmail.com}
      EMAIL_PASS: ${EMAIL_PASS:-your-gmail-app-password}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - securetag-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: securetag-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - securetag-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  securetag-network:
    driver: bridge

# Development override
---
# docker-compose.override.yml (for development)
version: '3.8'

services:
  backend:
    environment:
      NODE_ENV: development
    volumes:
      - .:/app
      - /app/node_modules
    command: npm run dev
    
  # Development MongoDB (no auth for easier development)
  mongodb:
    environment:
      MONGO_INITDB_ROOT_USERNAME: ""
      MONGO_INITDB_ROOT_PASSWORD: ""
    ports:
      - "27017:27017"